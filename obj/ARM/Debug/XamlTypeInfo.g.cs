//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace App
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::App3.Math_Homework_Helper_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace App3.Math_Homework_Helper_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[25];
            _typeNameTable[0] = "MyScript.Atk.MathWidget.MathWidget";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "Byte[]";
            _typeNameTable[3] = "System.Array";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "Byte";
            _typeNameTable[6] = "System.ValueType";
            _typeNameTable[7] = "String";
            _typeNameTable[8] = "Boolean";
            _typeNameTable[9] = "MyScript.Atk.MathWidget.MAWAngleUnit";
            _typeNameTable[10] = "System.Enum";
            _typeNameTable[11] = "UInt32";
            _typeNameTable[12] = "MyScript.Atk.MathWidget.MAWBeautifyOption";
            _typeNameTable[13] = "MyScript.Atk.MathWidget.MAWRoundingMode";
            _typeNameTable[14] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[15] = "Windows.UI.Color";
            _typeNameTable[16] = "Single";
            _typeNameTable[17] = "Single[]";
            _typeNameTable[18] = "MyScript.Atk.MathWidget.MAWEdgeInsets";
            _typeNameTable[19] = "MyScript.Atk.MathWidget.MAWGestures";
            _typeNameTable[20] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[21] = "System.Windows.Input.ICommand";
            _typeNameTable[22] = "MainPage.MainPage";
            _typeNameTable[23] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[24] = "Windows.UI.Xaml.Controls.UserControl";

            _typeTable = new global::System.Type[25];
            _typeTable[0] = typeof(global::MyScript.Atk.MathWidget.MathWidget);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::System.Byte[]);
            _typeTable[3] = typeof(global::System.Array);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.Byte);
            _typeTable[6] = typeof(global::System.ValueType);
            _typeTable[7] = typeof(global::System.String);
            _typeTable[8] = typeof(global::System.Boolean);
            _typeTable[9] = typeof(global::MyScript.Atk.MathWidget.MAWAngleUnit);
            _typeTable[10] = typeof(global::System.Enum);
            _typeTable[11] = typeof(global::System.UInt32);
            _typeTable[12] = typeof(global::MyScript.Atk.MathWidget.MAWBeautifyOption);
            _typeTable[13] = typeof(global::MyScript.Atk.MathWidget.MAWRoundingMode);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[15] = typeof(global::Windows.UI.Color);
            _typeTable[16] = typeof(global::System.Single);
            _typeTable[17] = typeof(global::System.Single[]);
            _typeTable[18] = typeof(global::MyScript.Atk.MathWidget.MAWEdgeInsets);
            _typeTable[19] = typeof(global::MyScript.Atk.MathWidget.MAWGestures);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[21] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[22] = typeof(global::MainPage.MainPage);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MathWidget() { return new global::MyScript.Atk.MathWidget.MathWidget(); }
        private object Activate_18_MAWEdgeInsets() { return new global::MyScript.Atk.MathWidget.MAWEdgeInsets(); }
        private object Activate_22_MainPage() { return new global::MainPage.MainPage(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MyScript.Atk.MathWidget.MathWidget
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_MathWidget;
                userType.AddMemberName("Certificate");
                userType.AddMemberName("ResourcePath");
                userType.AddMemberName("CanUndo");
                userType.AddMemberName("CanRedo");
                userType.AddMemberName("IsBusy");
                userType.AddMemberName("IsEmpty");
                userType.AddMemberName("AngleUnit");
                userType.AddMemberName("DecimalsCount");
                userType.AddMemberName("BeautificationOption");
                userType.AddMemberName("RoundingMode");
                userType.AddMemberName("BackgroundView");
                userType.AddMemberName("InkColor");
                userType.AddMemberName("InkThickness");
                userType.AddMemberName("TextColor");
                userType.AddMemberName("TransientTextColor");
                userType.AddMemberName("BaselineColor");
                userType.AddMemberName("BaselinePattern");
                userType.AddMemberName("BaselineThickness");
                userType.AddMemberName("PaddingRatio");
                userType.AddMemberName("PalmRejectionEnabled");
                userType.AddMemberName("PalmRejectionLeftHanded");
                userType.AddMemberName("EnabledGestures");
                userType.AddMemberName("Bundle");
                userType.AddMemberName("Config");
                userType.AddMemberName("Font");
                userType.AddMemberName("ItalicFont");
                userType.AddMemberName("UndoCommand");
                userType.AddMemberName("RedoCommand");
                userType.AddMemberName("ClearCommand");
                userType.AddMemberName("BeautifyCommand");
                userType.AddMemberName("SolveCommand");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Byte[]
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Array
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Byte
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 6:   //  System.ValueType
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 7:   //  String
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Boolean
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  MyScript.Atk.MathWidget.MAWAngleUnit
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MAWAngleUnitDegree", global::MyScript.Atk.MathWidget.MAWAngleUnit.MAWAngleUnitDegree);
                userType.AddEnumValue("MAWAngleUnitRadian", global::MyScript.Atk.MathWidget.MAWAngleUnit.MAWAngleUnitRadian);
                xamlType = userType;
                break;

            case 10:   //  System.Enum
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 11:   //  UInt32
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  MyScript.Atk.MathWidget.MAWBeautifyOption
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MAWBeautifyDisabled", global::MyScript.Atk.MathWidget.MAWBeautifyOption.MAWBeautifyDisabled);
                userType.AddEnumValue("MAWBeautifyFontify", global::MyScript.Atk.MathWidget.MAWBeautifyOption.MAWBeautifyFontify);
                userType.AddEnumValue("MAWBeautifyFontifyAndSolve", global::MyScript.Atk.MathWidget.MAWBeautifyOption.MAWBeautifyFontifyAndSolve);
                xamlType = userType;
                break;

            case 13:   //  MyScript.Atk.MathWidget.MAWRoundingMode
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MAWRoundingModeTruncation", global::MyScript.Atk.MathWidget.MAWRoundingMode.MAWRoundingModeTruncation);
                userType.AddEnumValue("MAWRoundingModeRounding", global::MyScript.Atk.MathWidget.MAWRoundingMode.MAWRoundingModeRounding);
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Windows.UI.Color
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Single
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Single[]
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  MyScript.Atk.MathWidget.MAWEdgeInsets
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  MyScript.Atk.MathWidget.MAWGestures
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MAWGesturesNone", global::MyScript.Atk.MathWidget.MAWGestures.MAWGesturesNone);
                userType.AddEnumValue("MAWGesturesStrike", global::MyScript.Atk.MathWidget.MAWGestures.MAWGesturesStrike);
                userType.AddEnumValue("MAWGesturesOverwrite", global::MyScript.Atk.MathWidget.MAWGestures.MAWGesturesOverwrite);
                userType.AddEnumValue("MAWGesturesDefault", global::MyScript.Atk.MathWidget.MAWGestures.MAWGesturesDefault);
                xamlType = userType;
                break;

            case 20:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  System.Windows.Input.ICommand
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  MainPage.MainPage
                userType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::MyScript.Atk.MathWidget.MathWidget_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_MathWidget_Certificate(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.Certificate;
        }
        private void set_0_MathWidget_Certificate(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.Certificate = (global::System.Byte[])Value;
        }
        private object get_1_MathWidget_ResourcePath(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.ResourcePath;
        }
        private void set_1_MathWidget_ResourcePath(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.ResourcePath = (global::System.String)Value;
        }
        private object get_2_MathWidget_CanUndo(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.CanUndo;
        }
        private object get_3_MathWidget_CanRedo(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.CanRedo;
        }
        private object get_4_MathWidget_IsBusy(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.IsBusy;
        }
        private object get_5_MathWidget_IsEmpty(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.IsEmpty;
        }
        private object get_6_MathWidget_AngleUnit(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.AngleUnit;
        }
        private void set_6_MathWidget_AngleUnit(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.AngleUnit = (global::MyScript.Atk.MathWidget.MAWAngleUnit)Value;
        }
        private object get_7_MathWidget_DecimalsCount(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.DecimalsCount;
        }
        private void set_7_MathWidget_DecimalsCount(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.DecimalsCount = (global::System.UInt32)Value;
        }
        private object get_8_MathWidget_BeautificationOption(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.BeautificationOption;
        }
        private void set_8_MathWidget_BeautificationOption(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.BeautificationOption = (global::MyScript.Atk.MathWidget.MAWBeautifyOption)Value;
        }
        private object get_9_MathWidget_RoundingMode(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.RoundingMode;
        }
        private void set_9_MathWidget_RoundingMode(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.RoundingMode = (global::MyScript.Atk.MathWidget.MAWRoundingMode)Value;
        }
        private object get_10_MathWidget_BackgroundView(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.BackgroundView;
        }
        private void set_10_MathWidget_BackgroundView(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.BackgroundView = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_11_MathWidget_InkColor(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.InkColor;
        }
        private void set_11_MathWidget_InkColor(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.InkColor = (global::Windows.UI.Color)Value;
        }
        private object get_12_MathWidget_InkThickness(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.InkThickness;
        }
        private void set_12_MathWidget_InkThickness(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.InkThickness = (global::System.Single)Value;
        }
        private object get_13_MathWidget_TextColor(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.TextColor;
        }
        private void set_13_MathWidget_TextColor(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.TextColor = (global::Windows.UI.Color)Value;
        }
        private object get_14_MathWidget_TransientTextColor(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.TransientTextColor;
        }
        private void set_14_MathWidget_TransientTextColor(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.TransientTextColor = (global::Windows.UI.Color)Value;
        }
        private object get_15_MathWidget_BaselineColor(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.BaselineColor;
        }
        private void set_15_MathWidget_BaselineColor(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.BaselineColor = (global::Windows.UI.Color)Value;
        }
        private object get_16_MathWidget_BaselinePattern(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.BaselinePattern;
        }
        private void set_16_MathWidget_BaselinePattern(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.BaselinePattern = (global::System.Single[])Value;
        }
        private object get_17_MathWidget_BaselineThickness(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.BaselineThickness;
        }
        private void set_17_MathWidget_BaselineThickness(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.BaselineThickness = (global::System.Single)Value;
        }
        private object get_18_MathWidget_PaddingRatio(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.PaddingRatio;
        }
        private void set_18_MathWidget_PaddingRatio(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.PaddingRatio = (global::MyScript.Atk.MathWidget.MAWEdgeInsets)Value;
        }
        private object get_19_MathWidget_PalmRejectionEnabled(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.PalmRejectionEnabled;
        }
        private void set_19_MathWidget_PalmRejectionEnabled(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.PalmRejectionEnabled = (global::System.Boolean)Value;
        }
        private object get_20_MathWidget_PalmRejectionLeftHanded(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.PalmRejectionLeftHanded;
        }
        private void set_20_MathWidget_PalmRejectionLeftHanded(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.PalmRejectionLeftHanded = (global::System.Boolean)Value;
        }
        private object get_21_MathWidget_EnabledGestures(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.EnabledGestures;
        }
        private void set_21_MathWidget_EnabledGestures(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.EnabledGestures = (global::MyScript.Atk.MathWidget.MAWGestures)Value;
        }
        private object get_22_MathWidget_Bundle(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.Bundle;
        }
        private void set_22_MathWidget_Bundle(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.Bundle = (global::System.String)Value;
        }
        private object get_23_MathWidget_Config(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.Config;
        }
        private void set_23_MathWidget_Config(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.Config = (global::System.String)Value;
        }
        private object get_24_MathWidget_Font(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.Font;
        }
        private void set_24_MathWidget_Font(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.Font = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_25_MathWidget_ItalicFont(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.ItalicFont;
        }
        private void set_25_MathWidget_ItalicFont(object instance, object Value)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            that.ItalicFont = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_26_MathWidget_UndoCommand(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.UndoCommand;
        }
        private object get_27_MathWidget_RedoCommand(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.RedoCommand;
        }
        private object get_28_MathWidget_ClearCommand(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.ClearCommand;
        }
        private object get_29_MathWidget_BeautifyCommand(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.BeautifyCommand;
        }
        private object get_30_MathWidget_SolveCommand(object instance)
        {
            var that = (global::MyScript.Atk.MathWidget.MathWidget)instance;
            return that.SolveCommand;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember xamlMember = null;
            global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MyScript.Atk.MathWidget.MathWidget.Certificate":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "Certificate", "Byte[]");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_MathWidget_Certificate;
                xamlMember.Setter = set_0_MathWidget_Certificate;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.ResourcePath":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "ResourcePath", "String");
                xamlMember.Getter = get_1_MathWidget_ResourcePath;
                xamlMember.Setter = set_1_MathWidget_ResourcePath;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.CanUndo":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "CanUndo", "Boolean");
                xamlMember.Getter = get_2_MathWidget_CanUndo;
                xamlMember.SetIsReadOnly();
                break;
            case "MyScript.Atk.MathWidget.MathWidget.CanRedo":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "CanRedo", "Boolean");
                xamlMember.Getter = get_3_MathWidget_CanRedo;
                xamlMember.SetIsReadOnly();
                break;
            case "MyScript.Atk.MathWidget.MathWidget.IsBusy":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "IsBusy", "Boolean");
                xamlMember.Getter = get_4_MathWidget_IsBusy;
                xamlMember.SetIsReadOnly();
                break;
            case "MyScript.Atk.MathWidget.MathWidget.IsEmpty":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "IsEmpty", "Boolean");
                xamlMember.Getter = get_5_MathWidget_IsEmpty;
                xamlMember.SetIsReadOnly();
                break;
            case "MyScript.Atk.MathWidget.MathWidget.AngleUnit":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "AngleUnit", "MyScript.Atk.MathWidget.MAWAngleUnit");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_MathWidget_AngleUnit;
                xamlMember.Setter = set_6_MathWidget_AngleUnit;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.DecimalsCount":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "DecimalsCount", "UInt32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_MathWidget_DecimalsCount;
                xamlMember.Setter = set_7_MathWidget_DecimalsCount;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.BeautificationOption":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "BeautificationOption", "MyScript.Atk.MathWidget.MAWBeautifyOption");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_MathWidget_BeautificationOption;
                xamlMember.Setter = set_8_MathWidget_BeautificationOption;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.RoundingMode":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "RoundingMode", "MyScript.Atk.MathWidget.MAWRoundingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_MathWidget_RoundingMode;
                xamlMember.Setter = set_9_MathWidget_RoundingMode;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.BackgroundView":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "BackgroundView", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_MathWidget_BackgroundView;
                xamlMember.Setter = set_10_MathWidget_BackgroundView;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.InkColor":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "InkColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_MathWidget_InkColor;
                xamlMember.Setter = set_11_MathWidget_InkColor;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.InkThickness":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "InkThickness", "Single");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_MathWidget_InkThickness;
                xamlMember.Setter = set_12_MathWidget_InkThickness;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.TextColor":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "TextColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_MathWidget_TextColor;
                xamlMember.Setter = set_13_MathWidget_TextColor;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.TransientTextColor":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "TransientTextColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_MathWidget_TransientTextColor;
                xamlMember.Setter = set_14_MathWidget_TransientTextColor;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.BaselineColor":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "BaselineColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_MathWidget_BaselineColor;
                xamlMember.Setter = set_15_MathWidget_BaselineColor;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.BaselinePattern":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "BaselinePattern", "Single[]");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_MathWidget_BaselinePattern;
                xamlMember.Setter = set_16_MathWidget_BaselinePattern;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.BaselineThickness":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "BaselineThickness", "Single");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_MathWidget_BaselineThickness;
                xamlMember.Setter = set_17_MathWidget_BaselineThickness;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.PaddingRatio":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "PaddingRatio", "MyScript.Atk.MathWidget.MAWEdgeInsets");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_MathWidget_PaddingRatio;
                xamlMember.Setter = set_18_MathWidget_PaddingRatio;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.PalmRejectionEnabled":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "PalmRejectionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_MathWidget_PalmRejectionEnabled;
                xamlMember.Setter = set_19_MathWidget_PalmRejectionEnabled;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.PalmRejectionLeftHanded":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "PalmRejectionLeftHanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_MathWidget_PalmRejectionLeftHanded;
                xamlMember.Setter = set_20_MathWidget_PalmRejectionLeftHanded;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.EnabledGestures":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "EnabledGestures", "MyScript.Atk.MathWidget.MAWGestures");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_MathWidget_EnabledGestures;
                xamlMember.Setter = set_21_MathWidget_EnabledGestures;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.Bundle":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "Bundle", "String");
                xamlMember.Getter = get_22_MathWidget_Bundle;
                xamlMember.Setter = set_22_MathWidget_Bundle;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.Config":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "Config", "String");
                xamlMember.Getter = get_23_MathWidget_Config;
                xamlMember.Setter = set_23_MathWidget_Config;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.Font":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "Font", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_MathWidget_Font;
                xamlMember.Setter = set_24_MathWidget_Font;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.ItalicFont":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "ItalicFont", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_MathWidget_ItalicFont;
                xamlMember.Setter = set_25_MathWidget_ItalicFont;
                break;
            case "MyScript.Atk.MathWidget.MathWidget.UndoCommand":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "UndoCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_26_MathWidget_UndoCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "MyScript.Atk.MathWidget.MathWidget.RedoCommand":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "RedoCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_27_MathWidget_RedoCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "MyScript.Atk.MathWidget.MathWidget.ClearCommand":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "ClearCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_28_MathWidget_ClearCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "MyScript.Atk.MathWidget.MathWidget.BeautifyCommand":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "BeautifyCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_29_MathWidget_BeautifyCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "MyScript.Atk.MathWidget.MathWidget.SolveCommand":
                userType = (global::App3.Math_Homework_Helper_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyScript.Atk.MathWidget.MathWidget");
                xamlMember = new global::App3.Math_Homework_Helper_XamlTypeInfo.XamlMember(this, "SolveCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_30_MathWidget_SolveCommand;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App3.Math_Homework_Helper_XamlTypeInfo.XamlSystemBaseType
    {
        global::App3.Math_Homework_Helper_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App3.Math_Homework_Helper_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::App3.Math_Homework_Helper_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App3.Math_Homework_Helper_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

